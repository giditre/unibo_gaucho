import requests
import random
import json
import argparse
from time import sleep
import logging
import os

def rand_mac():
  # 52:54:00 identifies Realtek
  return "52:54:00:%02x:%02x:%02x" % (
            random.randint(0, 255),
            random.randint(0, 255),
            random.randint(0, 255)
            )

### Logging setup

logger = logging.getLogger(os.path.basename(__file__))
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('[ %(asctime)s ][ %(levelname)s ] %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

### Command line argument parsing

parser = argparse.ArgumentParser()

parser.add_argument("address", help="Endpoint IP address")
parser.add_argument("port", help="Endpoint TCP port")

args = parser.parse_args()

ep_address = args.address
ep_port = args.port

# generate ramdom MAC address
node_mac = rand_mac()
node_class = random.choice(["I", "P", "S"])

# create informative message
payload = {
  "mac": node_mac,
  "class": node_class,
  "feature": 10,
  "av_res": random.randint(1,100),
  "service": random.choice(["Service{}".format(n) for n in range(1,6)])
}

while True:

  try:
    payload["av_res"] = random.randint(1,100)

    r = requests.post("http://{}:{}/nodes".format(ep_address, ep_port), json=payload)
    if r.status_code == 201:
      logger.info("Entry created")
    elif r.status_code == 200:
      logger.info("Entry updated")
    else:
      logger.warning("Request failed with response code {}".format(r.status_code))

    sleep(random.randint(5,15))

  except requests.exceptions.ConnectionError as ce:
    logger.warning("Connection error, retrying in 5 to 15 seconds...")
    sleep(random.randint(5,15))
  except KeyboardInterrupt:
    break
